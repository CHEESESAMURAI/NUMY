import re
import os
import json
import sqlite3
import asyncio
import requests
from datetime import date, timedelta

# aiogram v3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatAction

# Selenium –∏ webdriver_manager
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

###############################################################################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7774315895:AAFVVUfSBOw3t7WjGTM6KHFK160TveSGheA"
SERPER_API_KEY = "8ba851ed7ae1e6a655102bea15d73fdb39cdac79"  # –∫–ª—é—á –¥–ª—è serper.dev

WELCOME_MESSAGE = (
    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WHITESAMURAI!*\n\n"
    "–ú—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ "
    "–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É üìä.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
)

GLOBAL_SEARCH_PROMPT = "üåê –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É (Serper.dev):"


###############################################################################
# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Å–∏–º–≤–æ–ª–æ–≤
def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
    'can't parse entities: Can't find end of the entity...'
    """
    if not text:
        return ""
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ª–æ–º–∞—Ç—å Markdown
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


###############################################################################
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) –¥–ª—è "–ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"

def init_db():
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tracked_articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            article TEXT
        )
    ''')
    conn.commit()
    conn.close()


def add_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    if cur.fetchone() is None:
        cur.execute("INSERT INTO tracked_articles (user_id, article) VALUES (?, ?)", (user_id, article))
        conn.commit()
        conn.close()
        return True
    else:
        conn.close()
        return False


def remove_article(user_id, article):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM tracked_articles WHERE user_id = ? AND article = ?", (user_id, article))
    conn.commit()
    conn.close()


def list_articles(user_id):
    conn = sqlite3.connect('tracked_articles.db')
    cur = conn.cursor()
    cur.execute("SELECT article FROM tracked_articles WHERE user_id = ?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return [row[0] for row in rows]


###############################################################################
# –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö (sales_history.json)

def load_sales_history():
    filename = "sales_history.json"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            try:
                history = json.load(f)
            except Exception:
                history = {}
    else:
        history = {}
    return history


def update_sales_history(article, sales_today):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ –≤—á–µ—Ä–∞).
    –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞, —á—Ç–æ–±—ã –¥–∏–Ω–∞–º–∏–∫–∞ —Å—á–∏—Ç–∞–ª–∞—Å—å.
    """
    history = load_sales_history()
    today_str = str(date.today())
    if article not in history:
        yesterday_str = str(date.today() - timedelta(days=1))
        # –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ 5 –ø—Ä–æ–¥–∞–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä)
        fake_sales = sales_today - 5 if sales_today > 5 else sales_today + 5
        history[article] = [{"date": yesterday_str, "sales": fake_sales}]
    updated = False
    for entry in history[article]:
        if entry["date"] == today_str:
            entry["sales"] = sales_today
            updated = True
            break
    if not updated:
        history[article].append({"date": today_str, "sales": sales_today})
    with open("sales_history.json", "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=4)
    return history[article]


def compute_sales_trend(article_history):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É (–≤ %) –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω—ë–º,
    –ª–∏–±–æ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", –µ—Å–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    """
    if len(article_history) < 2:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    sorted_history = sorted(article_history, key=lambda x: x["date"])
    # –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    if sorted_history[-1]["date"] == str(date.today()):
        if len(sorted_history) >= 2:
            previous = sorted_history[-2]["sales"]
            today_sales = sorted_history[-1]["sales"]
        else:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if previous == 0:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    trend_percent = ((today_sales - previous) / previous) * 100
    return f"{trend_percent:.2f}%"


###############################################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries

def reveal_extended_info(driver):
    """
    –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –∏–Ω—Ñ—É.
    """
    try:
        button = driver.find_element(By.XPATH, "//*[contains(text(), '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')]")
        driver.execute_script("arguments[0].click();", button)
        WebDriverWait(driver, 5).until(
            lambda d: button not in d.find_elements(By.XPATH, "//*[contains(text(), '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')]")
        )
    except Exception:
        pass  # –∫–Ω–æ–ø–∫–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å


def get_extended_sales_data(driver):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö (–∑–∞ –º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª—é),
    –Ω–æ –∑–∞—á–∞—Å—Ç—É—é WB —ç—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏.
    """
    extended_sales = {"sale_month": 0, "sale_week": 0}
    reveal_extended_info(driver)
    try:
        month_elements = driver.find_elements(By.XPATH,
                                              "//*[contains(text(), '–∑–∞ –º–µ—Å—è—Ü') or contains(text(), '30 –¥–Ω–µ–π')]")
        if month_elements:
            for element in month_elements:
                text = element.text
                match = re.search(r'(\d+)', text)
                if match:
                    extended_sales["sale_month"] = int(match.group(1))
                    break
    except Exception:
        pass
    try:
        week_elements = driver.find_elements(By.XPATH,
                                             "//*[contains(text(), '–∑–∞ 7 –¥–Ω–µ–π') or contains(text(), '–Ω–µ–¥–µ–ª—è')]")
        if week_elements:
            for element in week_elements:
                text = element.text
                match = re.search(r'(\d+)', text)
                if match:
                    extended_sales["sale_week"] = int(match.group(1))
                    break
    except Exception:
        pass
    return extended_sales


def get_product_page_data(driver):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WB (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –æ—Ç–∑—ã–≤—ã),
    –ø–ª—é—Å –ø—Ä–æ–±—É–µ–º extended_sales (–∑–∞ –º–µ—Å—è—Ü/–Ω–µ–¥–µ–ª—é), –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
    """
    data = {}
    try:
        title_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "product-page__header"))
        )
        data["title"] = title_element.text.strip()
    except Exception:
        data["title"] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    price_text = None
    try:
        price_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "price-block__final-price"))
        )
        price_text = price_element.text
    except Exception:
        pass
    if not price_text:
        try:
            price_element = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//span[contains(@class, 'price-block')]"))
            )
            price_text = price_element.text
        except Exception:
            pass

    if price_text:
        price_text_clean = price_text.replace("‚ÇΩ", "").replace(" ", "").replace("\n", "")
        try:
            data["price"] = int(float(price_text_clean))
        except Exception:
            data["price"] = 0
    else:
        data["price"] = 0

    try:
        reviews_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CLASS_NAME, "product-review__count-review"))
        )
        data["reviews"] = reviews_element.text.strip()
    except Exception:
        data["reviews"] = "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

    extended_sales = get_extended_sales_data(driver)
    data.update(extended_sales)
    return data


def get_api_data(article, price, commission=0.15):
    """
    –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ "card.wb.ru/cards/v1/detail" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ —Å—É—Ç–∫–∏ (sale).
    """
    api_url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=0&nm={article}"
    sales_info = {
        "sales_today": 0,
        "revenue_today": 0,
        "profit_today": 0
    }
    try:
        resp = requests.get(api_url, headers={"User-Agent": "Mozilla/5.0"})
        if resp.status_code == 200:
            data_api = resp.json()
            products = data_api.get("data", {}).get("products", [])
            if products:
                product_data = products[0]
                sales_today = product_data.get("sale", 0)
                sales_info["sales_today"] = sales_today

                revenue_today = sales_today * price
                profit_today = revenue_today * (1 - commission)
                sales_info.update({
                    "revenue_today": revenue_today,
                    "profit_today": profit_today
                })
    except Exception:
        pass
    return sales_info


def get_wb_product_info(article):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã + –∑–∞–ø—Ä–æ—Å –∫ API WB.
    –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏, –≤—ã—Ä—É—á–∫—É, –ø—Ä–∏–±—ã–ª—å, –¥–∏–Ω–∞–º–∏–∫—É.
    """
    url = f"https://www.wildberries.ru/catalog/{article}/detail.aspx"

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-dev-shm-usage")
    # –£–∫–∞–∑—ã–≤–∞–µ–º User-Agent
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                         "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(url)
        page_data = get_product_page_data(driver)
    except Exception:
        page_data = {"title": "–û—à–∏–±–∫–∞", "price": 0, "reviews": "–ù–µ—Ç"}
    finally:
        driver.quit()

    api_data = get_api_data(article, page_data.get("price", 0))
    daily_sales = api_data.get("sales_today", 0)

    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º "–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ" –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü, –µ—Å–ª–∏ –Ω–µ—Ç —Å –ø–∞—Ä—Å–∏–Ω–≥–∞
    factor_week = 0.8
    factor_month = 0.7
    parsed_week = page_data.get("sale_week", 0)
    parsed_month = page_data.get("sale_month", 0)

    if parsed_week == 0:
        estimated_week = int(daily_sales * 7 * factor_week)
    else:
        estimated_week = parsed_week

    if parsed_month == 0:
        estimated_month = int(daily_sales * 30 * factor_month)
    else:
        estimated_month = parsed_month

    price = page_data.get("price", 0)
    estimated_week_revenue = estimated_week * price
    estimated_month_revenue = estimated_month * price
    commission = 0.15
    estimated_week_profit = estimated_week_revenue * (1 - commission)
    estimated_month_profit = estimated_month_revenue * (1 - commission)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É
    article_history = update_sales_history(article, daily_sales)
    sales_trend = compute_sales_trend(article_history)

    result = {
        "–ù–∞–∑–≤–∞–Ω–∏–µ": page_data.get("title", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
        "–¶–µ–Ω–∞": f'{price} ‚ÇΩ',
        "–û—Ç–∑—ã–≤—ã": page_data.get("reviews", "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"),
        "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏": daily_sales,
        "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞)": parsed_week,
        "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞)": parsed_month,
        "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é": estimated_week,
        "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü": estimated_month,
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏": f'{api_data.get("revenue_today", 0)} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏": f'{api_data.get("profit_today", 0):.0f} ‚ÇΩ',
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_week_revenue} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_week_profit:.0f} ‚ÇΩ',
        "–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_month_revenue} ‚ÇΩ',
        "–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)": f'{estimated_month_profit:.0f} ‚ÇΩ',
        "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)": sales_trend
    }
    return result


def format_sales_info(data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç–µ,
    –ø—Ä–∏ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
    """

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å Markdown
    def esc(t): return escape_markdown(t)

    title = esc(data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))
    price = esc(data.get('–¶–µ–Ω–∞', '0 ‚ÇΩ'))
    reviews = esc(data.get('–û—Ç–∑—ã–≤—ã', '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤'))

    s_day = str(data.get('–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å—É—Ç–∫–∏', 0))
    s_week_p = str(data.get('–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞)', 0))
    s_month_p = str(data.get('–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞)', 0))
    s_week_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é', 0))
    s_month_est = str(data.get('–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü', 0))

    rev_day = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    rev_week_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    rev_month_est = esc(data.get('–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))

    profit_day = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å—É—Ç–∫–∏', '0 ‚ÇΩ'))
    profit_week_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))
    profit_month_est = esc(data.get('–ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)', '0 ‚ÇΩ'))

    trend = esc(data.get('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é)', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))

    text = (
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
        f"*–¶–µ–Ω–∞:* {price}\n"
        f"*–û—Ç–∑—ã–≤—ã:* {reviews}\n\n"
        f"*–ü—Ä–æ–¥–∞–∂–∏:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {s_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞): {s_week_p}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (—Å –ø–∞—Ä—Å–∏–Ω–≥–∞): {s_month_p}\n"
        f"  ‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {s_week_est}\n"
        f"  ‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü: {s_month_est}\n\n"
        f"*–í—ã—Ä—É—á–∫–∞:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {rev_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {rev_month_est}\n\n"
        f"*–ü—Ä–∏–±—ã–ª—å:*\n"
        f"  ‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏: {profit_day}\n"
        f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_week_est}\n"
        f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {profit_month_est}\n\n"
        f"*–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é):* {trend}\n"
    )
    return text


###############################################################################
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ serper.dev (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É)

def global_search_serper(article: str) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ serper.dev –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Markdown-—Ñ–æ—Ä–º–∞—Ç–µ.
    """
    url = "https://google.serper.dev/search"
    payload = {
        "q": article,
        "gl": "ru",
        "hl": "ru"
    }
    headers = {
        "X-API-KEY": SERPER_API_KEY,
        "Content-Type": "application/json"
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        return f"–û—à–∏–±–∫–∞ serper.dev: {response.status_code}\n{response.text}"

    data = response.json()
    organic_results = data.get("organic", [])
    if not organic_results:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    out_text = ""
    for item in organic_results[:5]:
        title = item.get("title", "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get("link", "")
        snippet = item.get("snippet", "")

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        title_md = escape_markdown(title)
        link_md = escape_markdown(link)
        snippet_md = escape_markdown(snippet)

        # –§–æ—Ä–º–∏—Ä—É–µ–º Markdown-—Å—Å—ã–ª–∫—É
        out_text += f"üîó [{title_md}]({link_md})\nüí¨ {snippet_md}\n\n"

    return out_text.strip()


###############################################################################
# Telegram-–±–æ—Ç (aiogram v3)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

def back_kb():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ—ë –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è callback_data='back'.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    return kb

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª", callback_data="menu_add")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª", callback_data="menu_remove")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", callback_data="menu_list")],
        [InlineKeyboardButton(text="üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="menu_daily")],
        [InlineKeyboardButton(text="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (Serper)", callback_data="menu_global")]
    ])
    return kb


pending_action = {}  # {user_id: {"action": "..."}}


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(WELCOME_MESSAGE, reply_markup=main_menu_kb())


@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    if data == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(WELCOME_MESSAGE, reply_markup=main_menu_kb())
    elif data == "menu_add":
        pending_action[callback.from_user.id] = {"action": "add"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=back_kb())
    elif data == "menu_remove":
        pending_action[callback.from_user.id] = {"action": "remove"}
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=back_kb())
    elif data == "menu_list":
        articles = list_articles(callback.from_user.id)
        if articles:
            text = "üìã *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:*\n" + "\n".join(escape_markdown(a) for a in articles)
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤."
        await callback.message.edit_text(text, reply_markup=back_kb())
    elif data == "menu_daily":
        await callback.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        await bot.send_chat_action(callback.message.chat.id, action=ChatAction.TYPING)
        articles = list_articles(callback.from_user.id)
        if not articles:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–Ω–æ–ø–∫–æ–π \"–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª\"."
        else:
            text = ""
            for art in articles:
                loop = asyncio.get_event_loop()
                info = await loop.run_in_executor(None, get_wb_product_info, art)
                text += f"üî¢ *–ê—Ä—Ç–∏–∫—É–ª:* {escape_markdown(art)}\n{format_sales_info(info)}\n"
        await callback.message.edit_text(text, reply_markup=back_kb())
    elif data == "menu_global":
        pending_action[callback.from_user.id] = {"action": "global"}
        await callback.message.edit_text(GLOBAL_SEARCH_PROMPT, reply_markup=back_kb())


@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in pending_action:
        action = pending_action[user_id]["action"]
        article = message.text.strip()

        if action == "add":
            if add_article(user_id, article):
                response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."
            else:
                response = f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è."
        elif action == "remove":
            remove_article(user_id, article)
            response = f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª *{escape_markdown(article)}* —É–¥–∞–ª—ë–Ω."
        elif action == "global":
            await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (Serper.dev), –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
            loop = asyncio.get_event_loop()
            search_results = await loop.run_in_executor(None, global_search_serper, article)
            response = (
                f"üåê *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (Serper.dev) –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {escape_markdown(article)}:*\n\n"
                f"{search_results}"
            )

        # –£–¥–∞–ª—è–µ–º pending_action
        pending_action.pop(user_id, None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response, reply_markup=main_menu_kb())
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ pending_action:
        if message.text.strip().isdigit():
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤—ë–ª –∞—Ä—Ç–∏–∫—É–ª WB
            await bot.send_chat_action(message.chat.id, action=ChatAction.TYPING)
            await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, get_wb_product_info, message.text.strip())
            text = format_sales_info(info)
            await message.answer(text, reply_markup=main_menu_kb())
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º.",
                reply_markup=main_menu_kb()
            )


async def main():
    init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
